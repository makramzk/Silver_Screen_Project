 version: 2

sources:
  - name: Silver_Screen_Project
    database: Silver_Screen_Project
    schema: public
    tables:  # name all of the talbes would reference in the models
      - name: invoices_raw
      - name: Movie_Catalogue_raw
      - name: NJ_001_raw
      - name: NJ_002_raw
      - name: NJ_003_raw


version: 2

models:
  - name: movie_catalogue_clean
    description: "Cleaned movie catalog with essential movie details."
    columns:
      - name: movie_id
        description: "Unique identifier for each movie."
        tests:
          - unique   # Ensures no duplicate movie IDs
          - not_null # Ensures every movie has an ID
        
      - name: movie_title
        description: "Title of the movie."
        tests:
          - not_null  # Ensures no missing movie titles
          - unique    # Ensures no duplicate movie titles (if applicable)

      - name: release_date
        description: "The date when the movie was released."
        tests:
          - not_null   # Ensures all movies have a release date
          - accepted_values:
              values: ["1900-01-01", "2025-12-31"] # Adjust range based on the data

      - name: genre
        description: "Movie genre (e.g., Action, Comedy, Drama, etc.)."
        tests:
          - not_null  # Ensures no missing genres
          - accepted_values:
              values: ["Action", "Comedy", "Drama", "Horror", "Sci-Fi", "Romance", "Thriller"]

      - name: studio
        description: "Production studio responsible for the movie."
        tests:
          - not_null  # Ensures studio names are always available

      - name: budget
        description: "The production budget of the movie in USD."
        tests:
          - not_null  # Ensures budget data exists
          - positive_value:
              name: "budget_positive"
              description: "Ensures budget values are positive."

      - name: rating
        description: "The rating of the movie (G, PG, PG-13, R, etc.)."
        tests:
          - accepted_values:
              values: ["G", "PG", "PG-13", "R", "NC-17", "Not Rated"]

      - name: minutes
        description: "Duration of the movie in minutes."
        tests:
          - not_null  # Ensures runtime is available
          - positive_value:
              name: "runtime_positive"
              description: "Ensures movie duration is greater than 0."


  
  - name: Silver_Screen_ROI
    description: "This model calculates the return on investment (ROI) for movies based on revenue and rental cost."
    columns:
      - name: movie_id
        description: "Unique identifier for each movie."
        tests:
          - not_null

      - name: movie_title
        description: "Title of the movie."
        tests:
          - not_null

      - name: genre
        description: "Genre of the movie."
        tests:
          - not_null

      - name: studio
        description: "Production studio responsible for the movie."
        tests:
          - not_null

      - name: month
        description: "Month of the revenue and rental calculations."
        tests:
          - not_null

      - name: location
        description: "Geographical location of ticket sales."
        tests:
          - not_null

      - name: rental_cost
        description: "Monthly rental cost for the movie."
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0  # Ensures rental cost is never negative

      - name: tickets_sold
        description: "Total number of tickets sold."
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0  # Ensures no negative ticket sales

      - name: revenue
        description: "Total revenue generated from ticket sales."
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0  # Revenue should not be negative



  - name: aggregated_movie_revenue
    description: "Aggregated movie revenue data by movie, location, and month"
    columns:
      - name: movie_id
        description: "Unique identifier for each movie"
        tests:
          - not_null  # Ensures no movie_id is missing

      - name: month
        description: "Month of revenue aggregation"
        tests:
          - not_null  # Ensures no missing months

      - name: location
        description: "Location where the revenue was recorded"
        tests:
          - not_null  # Ensures no missing locations

      - name: total_tickets_sold
        description: "Total number of tickets sold for the movie"
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0  # Tickets sold cannot be negative

      - name: total_revenue
        description: "Total revenue generated from ticket sales"
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0  # Revenue should not be negative

  

  - name: aggregated_rental_cost
    description: "Aggregated rental cost data per movie, location, and month"
    columns:
      - name: movie_id
        description: "Unique identifier for each movie"
        tests:
          - not_null  # Ensures every rental cost entry is associated with a movie

      - name: month
        description: "Month of rental cost aggregation"
        tests:
          - not_null  # Ensures there are no missing months

      - name: location
        description: "Location where the rental cost was recorded"
        tests:
          - not_null  # Ensures locations are always provided

      - name: monthly_rental_cost
        description: "Total rental cost for a movie in a given location and month"
        tests:
          - not_null  # Rental cost should always be recorded
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0  # Rental cost cannot be negative
